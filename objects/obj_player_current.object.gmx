<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_current</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//controller = instance_create(x,y,obj_player_controls)

record_me = true

stop_counter = false

max_hp = 2
hp = max_hp

collision_distance = 3
player_speed = 4
len = point_distance(0,0,26,26) // This is the distance between the tip and the origin
// angle = point_distance(0,0,20,20)
state = PLAYER_STATE.is_alive

counter = 0
counter_max = 0 // highest size the array reached

FOOTSTEP_TIME = 5
alarm[0] = FOOTSTEP_TIME // create a "footstep"

if global.player_spawn_x &gt; 1420
{
    global.player_spawn_x = 896
    global.player_spawn_y += 100
} 
else 
{global.player_spawn_x += 100} // increase the spawn x position for each player

global.player_number += 1
number = global.player_number
name = global.name

// add this object to the array list
global.player_array[global.player_number] = id

MAX_ARRAY_SIZE = 3600 // one minute max

// initialize recording array and movement variables
if record_me = true
{
    /// initialize movement keys
    move_left = false
    move_right = false
    move_up = false
    move_down = false
    move_attack = false

    for(i = MAX_ARRAY_SIZE; i &lt;= 0; i++)
    {
        array_x[i] = 0
        array_y[i] = 0
        array_shoot[i] = false
        array_angle[i] = 0
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*
obj = instance_create(x,y,obj_player_stopped)
obj.image_angle = image_angle

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// footsteps!
if record_me = true // if I am the current player
{
    //if not (place_meeting(x,y,obj_footstep)) // if theres not already a footstep here
    //if not (xprevious = x) // if the player has moved
    {
        obj = instance_create(x,y,obj_footstep) // create a footstep
        
        if (hspeed = 0 and vspeed = 0) // if the player has moved since last step but is stopped atm
        {obj.image_index = 1} // create a dot
        else
        {obj.image_angle = direction} // footsteo face the way I was heading (NOT FACING)
        
        
    }
    
    alarm[0] = FOOTSTEP_TIME // repeat
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if hp &lt;= 0 {state = PLAYER_STATE.is_dead}

if state = PLAYER_STATE.is_dead
{
    sprite_index = spr_player_dead  
    record_me = false
    stop_counter = true
    hspeed = 0
    vspeed = 0
    depth = 220 // change the depth to behind AI etc
}

// allow movement and record the actions
if record_me = true
{
    scr_camera()

    scr_controls()
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parent_block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

move_contact_solid(0,2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if global.final_playthrough = true
{
    draw_text(x,y,number)
    sprite_index = spr_player_current
}

image_index = number-1

if record_me = true 
{draw_sprite_ext(spr_pointer,0,x+lengthdir_x(len-12,image_angle),y+lengthdir_y(len-12,image_angle),image_xscale,image_yscale,image_angle,image_blend,image_alpha)} 

draw_self()

x = round(x)
y = round(y)

if record_me = false{
if state = PLAYER_STATE.is_alive{
draw_sprite_ext(spr_arrow,0,x+lengthdir_x(len-12,image_angle),y+lengthdir_y(len-12,image_angle),image_xscale,image_yscale,image_angle,image_blend,image_alpha)}}

if record_me = false // RECORDING OF THE PLAYER
{
    if counter &lt; counter_max // if the recording has NOT ended
    {
        if stop_counter = false {counter += 1} // stop counter if player walks into wall
    
        // set the x/y position to the values stored in the array (values recorded)
        x = array_x[counter]
        y = array_y[counter]
        image_angle = array_angle[counter] // angle the recorded player
        
        // create bullet when the recorded player fired a shot
        if state = PLAYER_STATE.is_alive {if array_shoot[counter] = true {shoot()}}

    }
    else
    {state = PLAYER_STATE.is_dead} // if the recording has ended, kill the player
}
else // CURRENT PLAYER
{    
    stop_counter = false // never stop counter if player is playing
    counter += 1
    if counter_max &lt; counter {counter_max = counter}
    
    array_shoot[counter] = false // set each step to false unless player has shot
    
    array_x[counter] = x
    array_y[counter] = y
    
    //image_angle = point_direction(xprevious,yprevious,x,y) // point the way you're walking
    dir = point_direction(x,y,mouse_x,mouse_y) // point at mouse
    
    image_angle = (image_angle+(sin(degtorad(dir-image_angle))*7))
    
    
    //idd = instance_create(x+lengthdir_x(Len,Angle+image_angle),y+lengthdir_y(Len,Angle+image_angle),obj_bullet)

    array_angle[counter] = round(image_angle)
    
    if counter = MAX_ARRAY_SIZE {state = PLAYER_STATE.is_dead}

}



/*
// debug - delete
draw_text(x-60,y-40,counter)
draw_text(x-60,y-20,number)

draw_text(x-60,y,"x"+string(x))
draw_text(x-60,y+20,"y"+string(y))

draw_text(x-60,y+40,state)







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug

if number = global.player_number // if THIS object is the current player
{
    record_me = false
    instance_create(global.player_spawn_x,global.player_spawn_y,obj_player_current)
    //instance_create(x,y,obj_get_name)
    
    with (obj_footstep) instance_destroy() // fix!
}

x = xstart
y = ystart

state = PLAYER_STATE.is_alive
counter = 0
sprite_index = spr_player_recorded
stop_counter = false
hp = max_hp
depth = -number // current player overlaps other players

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,24</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
