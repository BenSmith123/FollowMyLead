<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_projectile_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
image_speed = 0.2

response_successful = false

http_response = ""

// generate a unique number based on the seconds past in the current year
unique_number = string(date_get_second_of_year(date_current_datetime())) + string(date_get_year(date_current_datetime()))

// give the url a unique number to avoid caching
url = "http://benjaminrsmith.com/electroExample.json?nocache="+unique_number

post = http_get(url)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/**** JSON notes! *****

JSON config file is retrieved on app startup (as string, not downloaded)
JSON is decoded and is read as a string
Data is then extracted based on the device type

The server message will be set based on the version, if the version is not found 'default' will be used'
(default will pop-up)

WARNING: HOW DO I AVOID CACHING??

Use a fake parametre to avoid: 
https://stackoverflow.com/questions/15041603/how-to-prevent-the-browser-from-caching-a-json-file

**********************/

global.version = "1.0.2" // FOR TESTING


if ds_map_find_value(async_load, "id") == post
{
    if ds_map_find_value(async_load, "status") == 0
    {
        http_response = ds_map_find_value(async_load, "result");
        
        //if string_pos("10856320DONTCHANGE",http_response) != 0 // if this ID is found in the response (msg successful and not a 404 error)
        {   
            response_successful = true
            show_message(http_response) // debug
            
            json = json_decode(http_response);
            
            if json != -1 // if the JSON isn't read or formatted properly
            {
                var data_map = ds_map_find_value(json, "iOS"); // global.operating system?
                
                if !is_undefined(data_map)
                {
                    get_server_message = ds_map_find_value(data_map, "1.0.4") // global.version
                    
                    if is_undefined(get_server_message) // if server message with the game version is not found
                    {
                        global.server_message = ds_map_find_value(data_map, "DefaultMsg") // get default message
                    }
                    else
                    {
                        global.server_message = get_server_message // confirm server message
                    }
                }
                else 
                {instance_destroy()} // if no data_map based on the operating system is found
                
                enable_feedback = ds_map_find_value(data_map, "EnableFeedback")
                enable_news_message = ds_map_find_value(data_map, "EnableNewsMsg")
                disable_ads = ds_map_find_value(data_map, "DisableAds")
                
                popup_msg_map = ds_map_find_value(data_map, "PopupMsgVersion") // check for the current in list of versions 

                for (var n = 0; n &lt; ds_list_size(popup_msg_map); n++;)
                {
                    popup_msg_version = ds_list_find_value(popup_msg_map, n)
                    
                    if popup_msg_version == global.version
                    {
                        // show message in a popup!!
                    }

                    show_message(popup_msg_version)
                }
            }
            else 
            {instance_destroy()}
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

/*
scr_text1()
draw_set_font(font_arial_2)

if response_successful
{draw_text(x,y-40,http_response)}

else if os_is_network_connected() {draw_text(x,y+40,"Loading.."); draw_self()}

else {draw_text(x,y+40,"Unable to connect to server.")}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
