<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialise everything, create a player

// create HUD
instance_create(0,0,obj_hud_pause)
instance_create(WIDTH-WIDTH/12 ,0,obj_hud_next_player)

scr_initialise_playable_level() // sets all level options

if global.debug_performance { show_debug_overlay(true) }

global.counter = 1 // counter for recorded players to use
global.player_number = 0

// set the spawn globals depending on where the player spawn object is
global.player_spawn_x = obj_spawn_point.x
global.player_spawn_y = obj_spawn_point.y
with (obj_spawn_point) instance_destroy() // destroy the object, SAVE MEMORY

instance_create(global.player_spawn_x,global.player_spawn_y,obj_player_current) // create first player object

lives_hud_x = 32
lives_hud_y = 32
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// remove the HUD and virtual keys

// remove virtual sticks and HUD buttons (except pause)
if instance_exists(obj_virtual_joystick) { instance_destroy(obj_virtual_joystick) }
if instance_exists(obj_hud_next_player) { instance_destroy(obj_hud_next_player) }
if instance_exists(obj_hud_life_bar) { instance_destroy(obj_hud_life_bar) }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// counting!

if global.counter != MAX_ARRAY_SIZE
{global.counter++}
else
{
    if instance_exists(obj_player_current)
    {instance_destroy(obj_player_current)}
    
    //scr_next_iteration() // automatically go to next iteration
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG STUFF

for (i = 0; i &lt; PLAYER_LIVES_START; i++)
{
    if i &gt;= PLAYER_LIVES 
    { draw_sprite(spr_hud_player_lives, 1, lives_hud_x + i * 36, lives_hud_y) } // clone
    else
    { draw_sprite(spr_hud_player_lives, 0, lives_hud_x + i * 36, lives_hud_y) } // player life
}


if global.debug_performance
{
    scr_text1()
    
    draw_set_halign(fa_right)
    
    draw_text(WIDTH-20,160,"Cycle time: "+string(fps))
    //draw_text(WIDTH-20,120,"FPS: "+string(fps_real))
    
    draw_text(WIDTH-20,180,"Objects: "+string(instance_count))
    
    draw_text(WIDTH-20,200,string(instance_number(obj_player_clone))+" Players / "+string(instance_number(parent_ai))+" AI")
}


if global.debug
{  
    scr_text1() 
    
    draw_text(20,15,"Counter: "+string(global.counter))
    
    // loop through the error message array and display all strings
    for(i = 0; i &lt; global.error_log_size; i++)
    {
        draw_text(20,45+(i*20),"["+string(i)+"] "+ string(global.error_msg[i]))
    }

    /*
    draw_text(x2,80,"
    F12 = Restart Game
    &lt;I&gt; = Toggle debug mode
    &lt;P&gt; = Final playthrough
    &lt;SHIFT&gt; Next iteration
    
    --- Controls ---
    ASDW / Arrow key movement
    Space / left-click to shoot
    ")
    */

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
