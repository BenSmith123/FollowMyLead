<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
player = 0 // set by obj_player (player object ID)

is_active = true

// VIRTUAL JOYSTICKS
// joystick 1: Used on the right, for aiming
// joystick 2: Used on left for moving

joystick_radius = 140

vstick_init(1,WIDTH-joystick_radius-20,HEIGHT-joystick_radius-20,joystick_radius,false,spr_virtual_joystick_back,spr_virtual_joystick_front)

vstick_init(2,joystick_radius+20,HEIGHT-joystick_radius-20,joystick_radius,false,spr_virtual_joystick_back_2,spr_virtual_joystick_front)

stick_x = vstick_get_x(2)
stick_y = vstick_get_y(2)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if instance_exists(player) = false {instance_destroy()}//{is_active = false}

if is_active
{
    vstick_step(1)
    vstick_step(2)
}


if IS_MOBILE // mobile virtual joystick!
{

    vs_dir = vstick_get_direction(2)

    if vstick_check(2) // checks if the vstick is being used
    {

        crossover = 23 // crossover size between the angles of the movement (e.g. moving left and up)
        
        // movement with crossover (8-point movement rather than 4-point)     
        if (vs_dir &gt; 315-crossover || vs_dir &lt;= 45+crossover) {player.move_right = true}
        if (vs_dir &gt; 225-crossover &amp;&amp; vs_dir &lt;= 315+crossover) {player.move_down = true}
        if (vs_dir &gt; 135-crossover &amp;&amp; vs_dir &lt;= 225+crossover) {player.move_left = true}
        if (vs_dir &gt; 45-crossover &amp;&amp; vs_dir &lt;= 135+crossover) {player.move_up = true}
        
        /****** OLD MOVEMENT SYSTEMS ******
        // WITHOUT ANY CROSSOVER: Left, right, up down controls when moving (rather than full 360)
        if (vs_dir &gt; 315 || vs_dir &lt;= 45) {move_right = true}
        if (vs_dir &gt; 225 &amp;&amp; vs_dir &lt;= 315) {move_down = true}
        if (vs_dir &gt; 135 &amp;&amp; vs_dir &lt;= 225) {move_left = true}
        if (vs_dir &gt; 45 &amp;&amp; vs_dir &lt;= 135) {move_up = true}
        
        // this moves in any angle etc but doesn't use the collisions etc below (making it able to walk through walls or sticking to solid objects)
        if place_free(x+lengthdir_x(5,vstick_get_direction(2)),y+lengthdir_y(5,vstick_get_direction(2)))
        {
            x+=lengthdir_x(10,vstick_get_direction(2))/3
            y+=lengthdir_y(10,vstick_get_direction(2))/3
        }
        **********************************/
    }
}


/// SHOOTING!!
if !(vstick_check(1)) // if the right stick is not being used
{
    if device_mouse_check_button_pressed(0,mb_left) 
    or device_mouse_check_button_pressed(1,mb_left)
    or device_mouse_check_button_pressed(2,mb_left)
    {
        if device_mouse_x_to_gui(0) &gt; WIDTH/2 // right side of screen
        or device_mouse_x_to_gui(1) &gt; WIDTH/2
        or device_mouse_x_to_gui(2) &gt; WIDTH/2
        {
            player.move_attack = true // shoot! 
        }
    }
}


/*
if place_meeting(device_mouse_x(0),device_mouse_y(0),self) 
and place_meeting(device_mouse_y(1),device_mouse_y(1),self)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the virtual keys

if player.is_alive
{
    if player.move_left = true {draw_sprite(sprite49,1,stick_x,stick_y)}
    if player.move_right = true {draw_sprite(sprite49,2,stick_x,stick_y)}
    if player.move_up = true {draw_sprite(sprite49,3,stick_x,stick_y)}
    if player.move_down = true {draw_sprite(sprite49,4,stick_x,stick_y)}
}

vstick_draw(1)
vstick_draw(2)

// draw_text(50,300,vstick_get_direction(2)) // debug

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
