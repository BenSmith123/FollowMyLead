<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_recorded</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-700</depth>
  <persistent>0</persistent>
  <parentName>parent_player</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Remember: if you want the variable to be reset for an iteration, add it to event_user0

event_inherited() // inherit the variables that both the current and the clone object share

is_alive = true

life_span = 0 // set by obj_player_current

image_angle2 = 0 // use instead of normal image_angle due to the collision box

num = instance_number(obj_player_clone)


//x_inactive_size = 0 // size of the x inactive movement array
move_x = false // on and off depending on the array_x_inactive
x_inactive_count = 1 // counter for the x movement inactive array
array_x_count = 1
array_x[0] = 0 // start array at 0

move_y = false
y_inactive_count = 1
array_y_count = 1
array_y[0] = 0 // start array at 0

move_angle = false
angle_inactive_count = 0
array_angle_count = 0


array_shoot_count = 1 // count of how many bullets have been CURRENTLY fired


// DECLARE ACTUAL ARRAYS

array_shoot[0] = 0 // start the array at 0
// ^^ 0 is reserved for the first shot (0 difference between the first shot and the shot before that as their is no shot before that)
array_x_inactive[0] = 0
array_y_inactive[0] = 0
array_angle_inactive[0] = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// start/stop moving angle

move_angle = !move_angle
angle_inactive_count++

/*//// DEBUG //////
if move_angle == false
{print_debug("(C) Angle stopped at "+string(global.counter))}
else
{print_debug("(C) Angle started at "+string(global.counter))}
/////////////////*/

if angle_inactive_count &lt; array_length_1d(array_angle_inactive) // if the end of the array is not reached
{
    alarm[4] = array_angle_inactive[angle_inactive_count] // reset the alarm to stop/start moving again
}
else
{move_angle = false} // if array has ended, stop the movement

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// start/stop moving Y

move_y = !move_y
y_inactive_count++

/*//// DEBUG //////
if move_y == false
{print_debug("(C) Stopped at "+string(global.counter))}
else
{print_debug("(C) Moved at "+string(global.counter))}
****************/

if y_inactive_count &lt; array_length_1d(array_y_inactive) // if the end of the array is not reached
{
    alarm[3] = array_y_inactive[y_inactive_count] // reset the alarm to stop/start moving again
}
else
{move_y = false} // if array has ended, stop the movement

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// start/stop moving X

move_x = !move_x
x_inactive_count++

////// DEBUG //////
if move_x == false
{print_debug("Stopped at "+string(global.counter))}
else
{print_debug("Moved at "+string(global.counter))}
/////////////////*/

if x_inactive_count &lt; array_length_1d(array_x_inactive) // if the end of the array is not reached
{
    alarm[2] = array_x_inactive[x_inactive_count] // reset the alarm to stop/start moving again
}
else
{move_x = false} // if array has ended, stop the movement

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// shoot!
if is_alive == false {exit}

// has to be different from calling the shoot script because the reload/canshoot etc.
idd = instance_create(x+lengthdir_x(len,image_angle2),y+lengthdir_y(len,image_angle2),obj_bullet_player)
idd.direction = image_angle2
idd.image_angle = image_angle2
idd.speed = bullet_speed

print_debug("clone shot at: "+string(global.counter))
//print_debug("clone next shot at: " +string(array_shoot[array_shoot_count+1]))

if array_shoot_count &lt; array_length_1d(array_shoot)-1 // if the array has not reached the end (minus 1 because of array index 0)
{
    array_shoot_count++ // avoid 0 in the array
    alarm[1] = array_shoot[array_shoot_count] // reset the alarm for the next time a bullet was fired
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// lifespan over, is_alive = false

is_alive = false

print_debug("------ Clone ("+string(id)+") died at "+string(global.counter)+" ------")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HP, death and recording


if hp &lt;= 0 
{
    is_alive = false
    image_angle = irandom_range(0,360) // random angle for death sprite
    move_x = false
    move_y = false    
}

// now handled by event_user0: if global.counter == life_span {is_alive = false} // die if the recording has ended

if is_alive == true
{
    if move_x == true // this is turned on/off via alarm2
    {
        if array_x_count &lt; array_length_1d(array_x)// DEBUG TO AVOID CRASH - try figure out the crash and remove this
        {
            x = array_x[array_x_count] // set x to the number stored in the x_array
            array_x_count++ // increment through the array
            
            if x == 0 {show_message(string(id)+" x is 0")} // DEBUG: REMOVE
        }
        else // DEBUG
        {show_message(string(id) + " x array has gone out of bounds!")} // DEBUG TO AVOID CRASH
    }
    
    //if show_question("Continue to next room?") {room_goto(rm_Level2)}else {game_end()}
    if move_y == true
    {
        if array_y_count &lt; array_length_1d(array_y)// DEBUG TO AVOID CRASH - try figure out the crash and remove this
        {
            y = array_y[array_y_count]
            array_y_count++
        }
        else // DEBUG
        {show_message(string(id) + " y array has gone out of bounds!")} // DEBUG TO AVOID CRASH
    }

    
    
    if move_angle == true
    {
        image_angle2 = array_angle[array_angle_count]
        array_angle_count++
    }
    
/*
    if array_x_count &lt;= array_length_1d(array_x)+1
    {
        if array_x[global.counter] != 0
        {x = array_x[global.counter]}
    }
    */
}
else
{
    sprite_index = spr_player_dead
    hspeed = 0
    vspeed = 0
    depth = 220 // change the depth to behind AI etc
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// RESET VARIABLES FOR ITERATION

x = xstart
y = ystart

hp = max_hp

is_alive = true

alarm[0] = life_span // start the countdown til dead

sprite_index = spr_player_recorded


// RESET THE RECORDING SYSTEM VARIABLES

array_shoot_count = 0 // this can be reset because it counts the amount of times a bullet is fired for both recording and re-using

move_x = false
x_inactive_count = 1
array_x_count = 1

move_y = false
y_inactive_count = 1
array_y_count = 1


// BEGIN THE RECORDING SYSTEM VARIABLES

if array_shoot_count != array_length_1d(array_shoot)-1 // if the array has not reached the end
{
    array_shoot_count++ // avoid 0 in the array
    alarm[1] = array_shoot[array_shoot_count]-1 // reset the alarm for the FIRST time a bullet was fired
    // the -1 will remove the delay from calling this alarm 1/60th of a second late
}

// start the countdown until movement
if array_length_1d(array_x_inactive) &gt; 1 // not 0 because any declared array has a size of 1
{alarm[2] = array_x_inactive[1]-1} // X

if array_length_1d(array_y_inactive) &gt; 1
{alarm[3] = array_y_inactive[1]-1}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
if is_alive == true
{
    // draw the arrow of a recorded player
    draw_sprite_ext(spr_arrow,0,x+lengthdir_x(len-12,image_angle2),y+lengthdir_y(len-12,image_angle2),image_xscale,image_yscale,image_angle2,image_blend,image_alpha)
}

draw_self()

if global.show_player_number
{draw_sprite(spr_player_numbers,num-1,x,y)} // draw clone number

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
