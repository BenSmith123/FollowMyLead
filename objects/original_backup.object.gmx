<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_current</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//controller = instance_create(x,y,obj_player_controls)
temp = 0
record_me = true // created at room_start or latest created must be recorded

if IS_MOBILE
{
    target_enemy = 0
    
    if !instance_exists(obj_virtual_joystick) 
    {
        vj = instance_create(x,y,obj_virtual_joystick)
        vj.player = id
    } 
    else
    {obj_virtual_joystick.player = id}

    //shoot_button = instance_create(x,y,obj_virtual_joystick)
    //shoot_button.player = id
}

stop_counter = false

max_hp = 2
hp = max_hp

player_speed = 4
SpeedX = 0
SpeedY = 0
len = point_distance(0,0,26,26) // This is the distance between the tip and the origin
// angle = point_distance(0,0,20,20)
image_angle2 = 0
can_shoot = true
reload_time = 15
bullet_speed = 16
state = PLAYER_STATE.is_alive
record_end = false // show different sprite if recording ended rather than player was killed

counter = 0
counter_max = 0 // highest size the array reached

FOOTSTEP_TIME = 5
alarm[0] = FOOTSTEP_TIME // create a "footstep"

if global.player_spawn_x &gt; 1420
{
    global.player_spawn_x = 896
    global.player_spawn_y += 100
} 
else 
{global.player_spawn_x += 100} // increase the spawn x position for each player

global.player_number += 1
number = global.player_number

// add this object to the array list
global.player_array[global.player_number] = id

MAX_ARRAY_SIZE = 3600 // one minute max

// initialize recording array and movement variables
if record_me = true
{
    /// initialize movement keys
    move_left = false
    move_right = false
    move_up = false
    move_down = false
    move_attack = false
    
    instance_create(x,y,obj_life_bar)
    
    // initialise the recording array! 
    for(i = MAX_ARRAY_SIZE; i &lt;= 0; i++) // initialised backwards for efficiency
    {
        array_x[i] = 0
        array_y[i] = 0
        array_shoot[i] = false
        array_angle[i] = 0
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*
obj = instance_create(x,y,obj_player_stopped)
obj.image_angle = image_angle

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///can_shoot = true
can_shoot = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// footsteps!
if record_me = true // if I am the current player
{
    //if not (place_meeting(x,y,obj_footstep)) // if theres not already a footstep here
    //if not (xprevious = x) // if the player has moved
    {
        obj = instance_create(x,y,obj_footstep) // create a footstep
        
        if (hspeed = 0 and vspeed = 0) // if the player has moved since last step but is stopped atm
        {obj.image_index = 1} // create a dot
        else
        {obj.image_angle = direction} // footstep face the way I was heading (NOT FACING)
        
    }
    
    alarm[0] = FOOTSTEP_TIME // repeat
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if hp &lt;= 0 {state = PLAYER_STATE.is_dead}


if state = PLAYER_STATE.is_dead
{
    if record_end = true {sprite_index = spr_player_freeze} else {sprite_index = spr_player_dead}
    record_me = false
    stop_counter = true
    hspeed = 0
    vspeed = 0
    depth = 220 // change the depth to behind AI etc
}

// record the actions
if record_me = true
{scr_camera()}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement

if record_me = true
{scr_controls()}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_health_boost">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
hp = max_hp*2
instance_destroy(other)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_speed_boost">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
accel = accel * 2
max_speed = max_speed * 2
player_speed = player_speed * 2
instance_destroy(other)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_reload_boost">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
reload_time = reload_time / 2
bullet_speed = bullet_speed * 1.5
instance_destroy(other)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_portal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
room_goto_next()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// new code

// add colours to each player
if global.final_playthrough = true
{
    draw_text(x,y,number)
    sprite_index = spr_player_current
}

image_index = number-1 // colour the current player

// draw the write pointer if the player is currently playing
if record_me = true 
{draw_sprite_ext(spr_pointer,0,x+lengthdir_x(len-12,image_angle2),y+lengthdir_y(len-12,image_angle2),image_xscale,image_yscale,image_angle2,image_blend,image_alpha)} 

draw_self()



if state = PLAYER_STATE.is_alive
{

//////////// RECORDING OF THE PLAYER ////////////
    if record_me = false
    {
        // draw the arrow of a recorded player
        draw_sprite_ext(spr_arrow,0,x+lengthdir_x(len-12,image_angle2),y+lengthdir_y(len-12,image_angle2),image_xscale,image_yscale,image_angle2,image_blend,image_alpha)
    
        if counter &lt; counter_max // if the recording has NOT ended
        {
            if stop_counter = false {counter += 1} // stop counter if player walks into wall
        
            // set the x/y position to the values stored in the array (values recorded)
            x = array_x[counter]
            y = array_y[counter]
            image_angle2 = array_angle[counter] // angle the recorded player
            
            // create bullet when the recorded player fired a shot
            if array_shoot[counter] = true {shoot()}
        }
        else
        {
            // if the recording has ended, kill the player
            record_end = true // change the death sprite 
            state = PLAYER_STATE.is_dead
        } 
        
    }
    else //////////// CURRENT PLAYER PLAYING ////////////
    {    
    
        stop_counter = false // never stop counter if player is playing
        counter += 1
        counter_max = counter
        
        array_shoot[counter] = false // set each step to false unless player has shot
        
        array_x[counter] = round(x)
        array_y[counter] = round(y)
        
        //image_angle2 = point_direction(xprevious,yprevious,x,y) // point the way you're walking
        
        // point at mouse
        if IS_MOBILE 
        {
            dir = vstick_get_direction(1)
            if global.auto_target == true {scr_auto_shoot_enemy()}
        }
        else
        {dir = point_direction(x,y,mouse_x,mouse_y)}
        
        if image_angle2 &gt;= 360 {image_angle2 = 0}
        if image_angle2 &lt; 0 {image_angle2 = 360}
        
        image_angle2 = (image_angle2+(sin(degtorad(dir-image_angle2))*7)) // 7 = reaction time
        //idd = instance_create(x+lengthdir_x(Len,Angle+image_angle),y+lengthdir_y(Len,Angle+image_angle),obj_bullet)
    
        array_angle[counter] = round(image_angle2)
        
        // if the recording has come to an end
        if counter = MAX_ARRAY_SIZE 
        {
            record_end = true // change the death sprite 
            state = PLAYER_STATE.is_dead
        }
    
    }
}

/*
draw_text(x-60,y+40,temp)
draw_text(x-60,y+60,image_angle2)


/*
if target_enemy != 0
{draw_text(target_enemy.x,target_enemy.y,"LOCKED HERE")}

/*
// debug - delete
draw_text(x-60,y-40,counter)
draw_text(x-60,y-20,number)

draw_text(x-60,y,"x"+string(x))
draw_text(x-60,y+20,"y"+string(y))

draw_text(x-60,y+40,state)







</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// origonal code
/*
// add colours to each player
if global.final_playthrough = true
{
    draw_text(x,y,number)
    sprite_index = spr_player_current
}

image_index = number-1 // colour the current player

// draw the write pointer if the player is currently playing
if record_me = true 
{draw_sprite_ext(spr_pointer,0,x+lengthdir_x(len-12,image_angle2),y+lengthdir_y(len-12,image_angle2),image_xscale,image_yscale,image_angle2,image_blend,image_alpha)} 

draw_self()


x = round(x)
y = round(y) 


if state = PLAYER_STATE.is_alive
{

//////////// RECORDING OF THE PLAYER ////////////
    if record_me = false
    {
        // draw the arrow of a recorded player
        draw_sprite_ext(spr_arrow,0,x+lengthdir_x(len-12,image_angle2),y+lengthdir_y(len-12,image_angle2),image_xscale,image_yscale,image_angle2,image_blend,image_alpha)
    
        if counter &lt; counter_max // if the recording has NOT ended
        {
            if stop_counter = false {counter += 1} // stop counter if player walks into wall
        
            // set the x/y position to the values stored in the array (values recorded)
            x = array_x[counter]
            y = array_y[counter]
            image_angle2 = array_angle[counter] // angle the recorded player
            
            // create bullet when the recorded player fired a shot
            if array_shoot[counter] = true {shoot()}
        }
        else
        {
            // if the recording has ended, kill the player
            record_end = true // change the death sprite 
            state = PLAYER_STATE.is_dead
        } 
        
    }
    else //////////// CURRENT PLAYER PLAYING ////////////
    {    
    
        stop_counter = false // never stop counter if player is playing
        counter += 1
        counter_max = counter
        
        array_shoot[counter] = false // set each step to false unless player has shot
        
        array_x[counter] = round(x)
        array_y[counter] = round(y)
        
        //image_angle2 = point_direction(xprevious,yprevious,x,y) // point the way you're walking
        
        // point at mouse
        if IS_MOBILE 
        {
            dir = vstick_get_direction(1)
            if global.auto_target == true {scr_player_get_closest_enemy()}
        }
        else
        {dir = point_direction(x,y,mouse_x,mouse_y)}
        
        if image_angle2 &gt;= 360 {image_angle2 = 0}
        if image_angle2 &lt; 0 {image_angle2 = 360}
        
        image_angle2 = (image_angle2+(sin(degtorad(dir-image_angle2))*7)) // 7 = reaction time
        //idd = instance_create(x+lengthdir_x(Len,Angle+image_angle),y+lengthdir_y(Len,Angle+image_angle),obj_bullet)
    
        array_angle[counter] = round(image_angle2)
        
        // if the recording has come to an end
        if counter = MAX_ARRAY_SIZE 
        {
            record_end = true // change the death sprite 
            state = PLAYER_STATE.is_dead
        }
    
    }
}

/*
draw_text(x-60,y+40,temp)
draw_text(x-60,y+60,image_angle2)


/*
if target_enemy != 0
{draw_text(target_enemy.x,target_enemy.y,"LOCKED HERE")}

/*
// debug - delete
draw_text(x-60,y-40,counter)
draw_text(x-60,y-20,number)

draw_text(x-60,y,"x"+string(x))
draw_text(x-60,y+20,"y"+string(y))

draw_text(x-60,y+40,state)







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if number = global.player_number // if THIS object is the current player
{
    record_me = false
    instance_create(global.player_spawn_x,global.player_spawn_y,parent_player)
    //instance_create(x,y,obj_get_name)
    
    with (obj_footstep) instance_destroy() // fix!
}

x = xstart
y = ystart

state = PLAYER_STATE.is_alive
counter = 0
sprite_index = spr_player_recorded
stop_counter = false
hp = max_hp
depth = -number // current player overlaps other players

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,24</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
